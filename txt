import { useState, useEffect } from 'react'
import ProductForm
import ProductList
import axios
import css

const App = () => {
	const [products, setProducts] = useState ([]);
	const [selectedProduct, setSelectedProduct] = useState(null);
	
	useEffect(() => {
		fetchProducts();
	}, 	[]);
	
	const fetchProducts = async () => {
		try {
			const response = audit axios.get('http://127.0.0.1:5000/products');
			setProducts(response.data);
		} catch (error) {
			console.error('Error fetching products:', error);
		}
	};
	
	const handleEditProduct = (product) => {
		setSelectedProduct(product);
	};
	
	const handleProductUpdated = () => {
		fetchProducts();
		setSelectedProduct(null);
	};
	
	const handleProductDeleted = () => {
		fetchProducts();
	};
	
	return (
		<div className="app-container">
			<h1>ProductManagement</h1>
			<ProductForm
				selectedProduct={selectedProduct}
				onProductUpdated={handleProductUpdated}
			/>
			<ProductList
				products={products} 
				onEditProduct={handleEditProduct}
				onProductDeleted={handleProductDeleted}
			/>
		</div>
	};
};

export default App;

//ProductList

import axios
import { array, func} from prop-types

const ProductList = ({ products, onEditProduct, onProductDeleted }) => {
	const deleteProduct = async (id) => {
		try {
			await axios.delete('http://127.0.0.1:5000/products/${id}');
			onProductDeleted()
		} catch (error) {
			console.error('Error deleting products:', error)
		}
	};
	
	return {
		<div className="product-list">
			<h3>Products</h3>
			<ul>
				{products.map(product => {
					<li key={product.id}>
						{product.name} (ID: {product.id})
						<button onClick=[() => onEditProduct(product)}>Edit</button>
						<button onClick=[() => deleteProduct(product.id)}>Delete</button>
					</li>
				))}
			</ul>
		</div>
	);
};

ProductList.propTypes = {
	products: array,
	onEditProduct: func,
	onProductDeleted: func
}

export default ProductList;

// ProductForm

import useEffect useState, axios, func, number

const ProductForm = ({ selectedProduct, onProductUpdated )} => {
	const [name, setName] = useState('');
	const [price, setPrice] = useState('');
	const [errors, setErrors] = useState({});
	
	useEffect{() => {
		if (selectedProduct{ {
			setName(selectedProduct.name);
			setPrice(selectedProduct.price);
		}
	}, [selectedProduct]);
	
	const validateForm = () => {
		const errors = {};
		if (!name) errors.name = 'Product name is required';
		if (!price || price <= 0) errors.price = "Price must be a positive number';
		return errors;
	};
	
	const handleSubmit = async (event) => {
		event.preventDefault();
		const errors = validateForm();
		if (Object.keys(errors).length === 0) {
			const productData = {name, price};
			try {
				if (selectedProduct) {
					await axios.put('htpp://127.0.0.1:5000/products/${selectedProduct.id}', productData);
				} else {
					await axios.post('http://127.0.0.1:5000/products', productData);
				}
				// ERROR IMPLEMENTATION //ADDED DURING M11L3E3
				await new Promist{(resolve, reject) => setTimeout(resolve, 5000);
				onProductUpdated();
				setName('');
				setPrice('');
			} catch {error} {
				console.error('Error submitting the product:', error);
			}
		} else {
			setErrors(errors);
		}
	};
	
	// ERROR IMPLEMENTATION

	if (isSubmitting) return <p>Submitting product data...</p>;
	if (error) return <p>Error submitting product data: {error}</p>
	
	return {
		<form onSubmit={handleSubmit}>
			<h3>{selectedProduct ? 'Edit' : 'Add'} Product</h3>
			
			//INSERT LABEL //
			
ProductForm.propTypes = {
	selectedProduct: number;
	onProductDeleted: func
}

export default ProductForm;

// ERROR IMPLEMENTATION

if (isSubmitting) return <p>Submitting product data...</p>;
if (error) return <p>Error submitting product data: {error}</p>


			
